{"name":"Hoodiecrow IMAP server","tagline":"Scriptable IMAP server for client integration testing","body":"# Hoodiecrow\r\n\r\n![Hoodiecrow](https://raw.github.com/andris9/hoodiecrow/master/hoodiecrow_actual.jpg)\r\n\r\nHoodiecrow is a scriptable IMAP server for client integration testing. It offers [IMAP4ver1](http://tools.ietf.org/html/rfc3501) support and some optional plugins that can be turned on and off. Nothing is ever written to disk, so when you restart the server, the original state is restored.\r\n\r\n[![Build Status](https://secure.travis-ci.org/andris9/hoodiecrow.png)](http://travis-ci.org/andris9/hoodiecrow)\r\n[![NPM version](https://badge.fury.io/js/hoodiecrow.png)](http://badge.fury.io/js/hoodiecrow)\r\n\r\n# Usage\r\n\r\n### Run as a standalone server\r\n\r\nTo run Hoodiecrow you need [Node.js](http://nodejs.org/) in your machine. Node should work on almost any platform, so Hoodiecrow should too.\r\n\r\nIf you have Node.js installed, install Hoodiecrow with the `npm` command and run it:\r\n\r\n```bash\r\nnpm install -g hoodiecrow\r\nsudo hoodiecrow\r\n```\r\n\r\nSudo is needed to bind to port 143. If you choose to use a higher port, say 1143 (`hoodiecrow -p 1143`), you do not need to use sudo.\r\n\r\n`hoodiecrow` command also provides an incoming SMTP server which appends all incoming messages\r\nautomatically to INBOX. To use it, use *smtpPort* option (`hoodiecrow --smtpPort=1025`).\r\n\r\n> **Protip** Running `hoodiecrow --help` displays useful information about command line options for Hoodiecrow and some sample configuration data.\r\n\r\nAfter you have started Hoodiecrow server, you can point your IMAP client to `localhost:143`. Use `\"testuser\"` as user name and `\"testpass\"` as password to log in to the server.\r\n\r\n### Include as a Node.js module\r\n\r\nAdd `hoodiecrow` dependency\r\n\r\n```bash\r\nnpm install hoodiecrow\r\n```\r\n\r\nCreate and start an IMAP server\r\n\r\n```javascript\r\nvar hoodiecrow = require(\"hoodiecrow\"),\r\n    server = hoodiecrow(options);\r\nserver.listen(143);\r\n```\r\n\r\nSee [complete.js](https://github.com/andris9/hoodiecrow/blob/master/examples/complete.js) for an example.\r\n\r\n## Scope\r\n\r\nHoodiecrow is a single user / multiple connections IMAP server that uses a JSON object as its directory and messages structure. Nothing is read from or written to disk and the entire directory structure is instantiated every time the server is started, eg. changes made through the IMAP protocol (adding/removing messages/flags etc) are not saved permanently. This should ensure that you can write integration tests for clients in a way where a new fresh server with unmodified data is started for every test.\r\n\r\nSeveral clients can connect to the server simultanously but all the clients share the same user account, even if login credentials are different.\r\n\r\nHoodiecrow is extendable, any command can be overwritten, plugins can be added etc (see command folder for built in command examples and plugin folder for plugin examples).\r\n\r\n## Authentication\r\n\r\nAn user can always login with username `\"testuser\"` and password `\"testpass\"`. Any other credentials can be added as needed.\r\n\r\n## Status\r\n\r\n### IMAP4rev1\r\n\r\nAll commands are supported but might be a bit buggy\r\n\r\n### Supported Plugins\r\n\r\nPlugins can be enabled when starting the server but can not be unloaded or loaded when the server is already running.\r\nAll plugins are self contained and not tied to core. If you do not enable a plugin, no trace of it is left\r\nto the system. For example, if you do not enable CONDSTORE, messages do not have a MODSEQ value set.\r\n\r\n  * **AUTH-PLAIN** Adds AUTH=PLAIN capability. Supports SALS-IR [RFC4959] as well\r\n  * **CONDSTORE** Partially implemented CONDSTORE [RFC4551] support\r\n  * **CREATE-SPECIAL-USE** Enables CREATE-SPECIAL-USE [RFC6154] capability. Allowed special flags can be set with server option `\"special-use\"`\r\n  * **ENABLE** Adds ENABLE capability [RFC5161]. Must be loaded before any plugin that requires ENABLE support (eg. CONDSTORE)\r\n  * **ID** Adds ID [RFC2971] capability\r\n  * **IDLE** Adds IDLE [RFC2177] capability\r\n  * **LITERALPLUS** Enables LITERAL+ [RFC2088] capability\r\n  * **LOGINDISABLED** Disables LOGIN support for unencrypted connections\r\n  * **NAMESPACE** Adds NAMESPACE [RFC2342] capability\r\n  * **SASL-IR** Enables SASL-IR [RFC4959] capability\r\n  * **SPECIAL-USE** Enables SPECIAL-USE [RFC6154] capability Mailboxes need to have a \"special-use\" property (String or Array) that will be used as extra flag for LIST and LSUB responses\r\n  * **STARTTLS** Adds STARTTLS command\r\n  * **UNSELECT** Adds UNSELECT [RFC3691] capability\r\n  * **XTOYBIRD** Custom plugin to allow programmatic control of the server. Login not required to use XTOYBIRD commands\r\n\r\nPlanned but not yet implemented\r\n\r\n  * **MOVE**\r\n  * **UIDPLUS**\r\n  * **QUOTA**\r\n  * **X-GM-EXT-1** except for **SEARCH X-GM-RAW**\r\n  * **AUTH=XOAUTH2** (maybe **AUTH=XOAUTH2** also)\r\n\r\n## Authentication\r\n\r\nAn user can always login with username `\"testuser\"` and password `\"testpass\"`. Any other credentials can be added as needed.\r\n\r\n## Existing XTOYBIRD commands\r\n\r\nTo use these functions, XTOYBIRD plugin needs to be enabled\r\n\r\nAvailable commands:\r\n\r\n  * **XTOYBIRD SERVER** dumps server internals\r\n  * **XTOYBIRD CONNECTION** dumps connection internals\r\n  * **XTOYBIRD STORAGE** dumps storage as JSON\r\n  * **XTOYBIRD USERADD \"username\" \"password\"** adds or updates user\r\n  * **XTOYBIRD USERDEL \"username\"** removes an user\r\n  * **XTOYBIRD SHUTDOWN** Closes the server after the last client disconnects. New connections are rejected.\r\n\r\nExample usage for XTOYBIRD STORAGE:\r\n\r\n```\r\nS: * Hoodiecrow ready for rumble\r\nC: A1 XTOYBIRD STORAGE\r\nS: * XTOYBIRD [XJSONDUMP] {3224}\r\nS: {\r\nS:     \"INBOX\": {\r\nS:         \"messages\": [\r\nS:             {\r\nS:                 \"raw\": \"Subject: hello 1\\r\\n\\r\\nWorld 1!\",\r\nS:                 ...\r\nS: A1 OK XTOYBIRD Completed\r\n```\r\n\r\n## Useful features for Hoodiecrow I'd like to see\r\n\r\n  * An ability to change UIDVALIDITY at runtime (eg. `A1 XTOYBIRD UIDVALIDITY INBOX 123` where 123 is the new UIDVALIDITY for INBOX)\r\n  * An ability to change available disk space (eg. `A1 XTOYBIRD DISKSPACE 100 50` where 100 is total disk space in bytes and 50 is available space)\r\n  * An ability to restart the server to return initial state (`A1 XTOYBIRD RESET`)\r\n  * An ability to change storage runtime by sending a JSON string describing the entire storage (`A1 XTOYBIRD UPDATE {123}\\r\\n{\"INBOX\":{...}})`)\r\n  * Maybe even enabling/disabling plugins but this would require restarting the server\r\n\r\n```\r\nC: A1 XTOYBIRD ENABLE ID UIDPLUS\r\nS: * XTOYBIRD ENABLED ID\r\nS: * XTOYBIRD ENABLED UIDPLUS\r\nS: A1 XTOYBIRD completed. Restart required\r\nC: A2 RESTART\r\n* BYE Server is Restarting\r\n```\r\n\r\n## CONDSTORE support\r\n\r\n  * All messages have MODSEQ value\r\n  * CONDSTORE can be ENABLEd\r\n  * SELECT/EXAMINE show HIGHESTMODSEQ\r\n  * SELECT/EXAMINE support (CONDSTORE) option\r\n  * Updating flags increments MODSEQ value\r\n  * FETCH (MODSEQ) works\r\n  * FETCH (CHANGEDSINCE modseq) works\r\n  * STORE (UNCHANGEDSINCE modseq) partially works (edge cases are not covered)\r\n\r\n**SEARCH MODSEQ** is not supported\r\n\r\n# Known issues\r\n\r\n  * *INBOX** as a separate namespace and managing INBOX subfolders is a mess. CREATE seems to work, DELETE is buggy and RENAME doesn't work with INBOX subfolders (unless the default namespace is `\"INBOX.\"`, not `\"\"`). I need to rethink how this works.\r\n\r\nNot sure if these should be fixed or not\r\n\r\n  * **STORE** does not emit notifications to other clients\r\n  * **MODSEQ** updates are not notified\r\n\r\nThese issues are probably not going to get fixed\r\n\r\n  * **Session flags** are not supported (this means that `\\Recent` flag is also not supported)\r\n  * **addr-adl** (at-domain-list) values are not supported, NIL is always used\r\n  * **anonymous namespaces** are not supported\r\n  * **STORE** returns NO and nothing is updated if there are pending EXPUNGE messages\r\n  * **CHARSET** argument is ignored\r\n\r\n# Running tests\r\n\r\nRunning tests requires you to have grunt-cli installed\r\n\r\n    npm install -g grunt-cli\r\n\r\nAfter which you can run\r\n\r\n    grunt\r\n\r\nor\r\n\r\n    npm test\r\n\r\n## Example configs\r\n\r\n### Cyrus\r\n\r\nconfig.json:\r\n\r\n```json\r\n{\r\n    \"INBOX\":{},\r\n    \"INBOX.\":{},\r\n    \"user.\":{\r\n        \"type\":\"user\"\r\n    },\r\n    \"\":{\r\n        \"type\":\"shared\"\r\n    }\r\n}\r\n```\r\n\r\n### Gmail\r\n\r\nconfig.json:\r\n\r\n```json\r\n{\r\n    \"INBOX\":{},\r\n    \"\":{\r\n        \"separator\": \"/\",\r\n        \"folders\":{\r\n            \"[Gmail]\":{\r\n                \"flags\": [\"\\\\Noselect\"],\r\n                \"folders\": {\r\n                    \"All Mail\":{\r\n                        \"special-use\": \"\\\\All\"\r\n                    },\r\n                    \"Drafts\":{\r\n                        \"special-use\": \"\\\\Drafts\"\r\n                    },\r\n                    \"Important\":{\r\n                        \"special-use\": \"\\\\Important\"\r\n                    },\r\n                    \"Sent Mail\":{\r\n                        \"special-use\": \"\\\\Sent\"\r\n                    },\r\n                    \"Spam\":{\r\n                        \"special-use\": \"\\\\Junk\"\r\n                    },\r\n                    \"Starred\":{\r\n                        \"special-use\": \"\\\\Flagged\"\r\n                    },\r\n                    \"Trash\":{\r\n                        \"special-use\": \"\\\\Trash\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Creating custom plugins\r\n\r\nA plugin can be a string as a pointer to a built in plugin or a function. Plugin function is run when the server is created and gets server instance object as an argument.\r\n\r\n```javascript\r\nhoodiecrow({\r\n    // Add two plugins, built in \"IDLE\" and custom function\r\n    plugin: [\"IDLE\", myAwesomePlugin]\r\n});\r\n\r\n// Plugin handler\r\nfunction myAwesomePlugin(server){\r\n\r\n    // Add a string to the capability listing\r\n    server.registerCapability(\"XSUM\");\r\n\r\n    /**\r\n     * Add a new command X-SUM\r\n     * If client runs this command, the response is a sum of all\r\n     * numeric arguments provided\r\n     *\r\n     * A1 X-SUM 1 2 3 4 5\r\n     * * X-SUM 15\r\n     * A1 OK SUM completed\r\n     *\r\n     * @param {Object} connection - Session instance\r\n     * @param {Object} parsed - Input from the client in structured form\r\n     * @param {String} data - Input command as a binary string\r\n     * @param {Function} callback - callback function to run\r\n     */\r\n    server.setCommandHandler(\"XSUM\", function(connection, parsed, data, callback){\r\n\r\n        // Send untagged X-SUM response\r\n        connection.send({\r\n            tag: \"*\",\r\n            command: \"XSUM\",\r\n            attributes:[\r\n                [].concat(parsed.attributes || []).reduce(function(prev, cur){\r\n                    return prev + Number(cur.value);\r\n                }, 0)\r\n            ]\r\n        }, \"XSUM\", parsed, data);\r\n\r\n        // Send tagged OK response\r\n        connection.send({\r\n            tag: parsed.tag,\r\n            command: \"OK\",\r\n            attributes:[\r\n                // TEXT allows to send unquoted \r\n                {type: \"TEXT\", value: \"X-SUM completed\"}\r\n            ]\r\n        }, \"X-SUM\", parsed, data);\r\n        callback();\r\n    });\r\n}\r\n```\r\n\r\n### Plugin mehtods\r\n\r\n#### Add a capability\r\n\r\n    server.registerCapability(name[, availabilty])\r\n\r\nWhere\r\n\r\n  * **name** a string displayed in the capability response\r\n  * **availability** a function which returns boolean value. Executed before displaying the capability response. If the function returns true, the capability is displayed, if false then not.\r\n\r\n#### Define a command\r\n\r\n    server.setCommandHandler(name, handler)\r\n\r\nWhere\r\n\r\n  * **name** is the command name\r\n  * **handler** *(connection, parsed, data, callback)* is the handler function for the command\r\n\r\nHandler arguments\r\n\r\n  * **connection** - Session instance\r\n  * **parsed** - Input from the client in structured form (see [imap-handler](https://github.com/andris9/imap-handler#parse-imap-commands) for reference)\r\n  * **data** - Input command as a binary string\r\n  * **callback** - callback function to run (does not take any arguments)\r\n\r\nThe command should send data to the client with `connection.send()`\r\n\r\n    connection.send(response, description, parsed, data, /* any additional data */)\r\n\r\nWhere\r\n\r\n  * **response** is a [imap-handler](https://github.com/andris9/imap-handler#parse-imap-commands) compatible object. To get the correct tag for responsing OK, NO or BAD, look into `parsed.tag`\r\n  * **description** is a string identifying the response to be used by other plugins\r\n  * **parsed** is the `parsed` argument passed to the handler\r\n  * **data** is the `data` argument passed to the handler\r\n  * additional arguments can be used to provide input for other plugins\r\n\r\n#### Retrieve an existing handler\r\n\r\nTo override existing commands you should first cache the existing command, so you can use it in your own command handler.\r\n\r\n    server.getCommandHandler(name) -> Function\r\n\r\nWhere\r\n\r\n  * **name** is the function name\r\n\r\nExample\r\n\r\n```javascript\r\nvar list = server.getCommandHandler(\"LIST\");\r\nserver.setCommandHandler(\"LIST\", function(connection, parsed, data, callback){\r\n    // do something\r\n    console.log(\"Received LIST request\");\r\n    // run the cached command\r\n    list(connection, parsed, data, callback);\r\n});\r\n```\r\n\r\n#### Reroute input from the client\r\n\r\nIf your plugin needs to get direct input from the client, you can reroute the incoming data by defining a `connection.inputHandler` function. The function gets input data as complete lines (without the linebreaks). Once you want to reroute the input back to the command handler, just clear the function.\r\n\r\n```\r\nconnection.inputHandler = function(line){\r\n    console.log(line);\r\n    connection.inputHandler = false;\r\n}\r\n```\r\n\r\nSee [idle.js](https://github.com/andris9/hoodiecrow/blob/master/lib/plugins/idle.js) for an example\r\n\r\n#### Override output\r\n\r\nAny response sent to the client can be overriden or cancelled by other handlers. You should append your handler to `server.outputHandlers` array. If something is being sent to the client, the response object is passed through all handlers in this array.\r\n\r\n    server.outputHandlers.push(function(connection, /* arguments from connection.send */){})\r\n\r\n`response` arguments from `connection.send` is an object and thus any modifications will be passed on. If `skipResponse` property is added to the response object, the data is not sent to the client.\r\n\r\n```javascript\r\n// All untagged responses are ignored and not passed to the client\r\nserver.outputHandlers.push(function(connection, response, description){\r\n    if(response.tag == \"*\"){\r\n        response.skipResponse = true;\r\n        console.log(\"Ignoring untagged response for %s\", description);\r\n    }\r\n});\r\n```\r\n\r\n#### Other possbile operations\r\n\r\nIt is possible to append messages to a mailbox; create, delete and rename mailboxes; change authentication state and so on through the `server` and `connection` methods and properties. See existing command handlers and plugins for examples.\r\n\r\n# License\r\n\r\n**MIT**\r\n","google":"UA-51322-45","note":"Don't delete this file! It's used internally to help with page regeneration."}